// Code generated by goa v3.13.2, DO NOT EDIT.
//
// librarian service
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package librarian

import (
	"context"

	librarianviews "github.com/dgdraganov/super-librarian/gen/librarian/views"
)

// The books service performs CRUD operations on books.
type Service interface {
	// Retrieve a book by id.
	GetBook(context.Context, *GetBookPayload) (res *Getbookresponse, err error)
	// Get paginated books by specifying the number of books to skip and take.
	GetBooks(context.Context, *GetBooksPayload) (res *Getbooksresponse, err error)
	// Create a single book.
	CreateBook(context.Context, *CreateBookPayload) (res *Createbookresponse, err error)
	// Updates a book by the given id.
	UpdateBook(context.Context, *UpdateBookPayload) (res *Updatebookresponse, err error)
	// Delete a single book.
	DeleteBook(context.Context, *DeleteBookPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "librarian"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"get-book", "get-books", "create-book", "update-book", "delete-book"}

// CreateBookPayload is the payload type of the librarian service create-book
// method.
type CreateBookPayload struct {
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

// Createbookresponse is the result type of the librarian service create-book
// method.
type Createbookresponse struct {
	// The unique id of the book.
	ID int
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

// DeleteBookPayload is the payload type of the librarian service delete-book
// method.
type DeleteBookPayload struct {
	// Book id
	ID int
}

// GetBookPayload is the payload type of the librarian service get-book method.
type GetBookPayload struct {
	// Book id
	ID int
}

// GetBooksPayload is the payload type of the librarian service get-books
// method.
type GetBooksPayload struct {
	// Number of books to skip
	Skip int
	// Number of books to take after skip
	Take int
}

// Getbookresponse is the result type of the librarian service get-book method.
type Getbookresponse struct {
	// The unique id of the book.
	ID int
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

// Getbooksresponse is the result type of the librarian service get-books
// method.
type Getbooksresponse struct {
	// List of paginated books.
	Books ResultbookCollection
}

type Resultbook struct {
	// The unique id of the book.
	ID int
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

type ResultbookCollection []*Resultbook

// UpdateBookPayload is the payload type of the librarian service update-book
// method.
type UpdateBookPayload struct {
	// The unique id of the book.
	ID *int
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

// Updatebookresponse is the result type of the librarian service update-book
// method.
type Updatebookresponse struct {
	// The unique id of the book.
	ID int
	// The title of the book.
	Title string
	// The author of the book.
	Author string
	// The cover image of the book.
	BookCover string
	// The date at which the book was published.
	PublishedAt string
}

// NewGetbookresponse initializes result type Getbookresponse from viewed
// result type Getbookresponse.
func NewGetbookresponse(vres *librarianviews.Getbookresponse) *Getbookresponse {
	return newGetbookresponse(vres.Projected)
}

// NewViewedGetbookresponse initializes viewed result type Getbookresponse from
// result type Getbookresponse using the given view.
func NewViewedGetbookresponse(res *Getbookresponse, view string) *librarianviews.Getbookresponse {
	p := newGetbookresponseView(res)
	return &librarianviews.Getbookresponse{Projected: p, View: "default"}
}

// NewGetbooksresponse initializes result type Getbooksresponse from viewed
// result type Getbooksresponse.
func NewGetbooksresponse(vres *librarianviews.Getbooksresponse) *Getbooksresponse {
	return newGetbooksresponse(vres.Projected)
}

// NewViewedGetbooksresponse initializes viewed result type Getbooksresponse
// from result type Getbooksresponse using the given view.
func NewViewedGetbooksresponse(res *Getbooksresponse, view string) *librarianviews.Getbooksresponse {
	p := newGetbooksresponseView(res)
	return &librarianviews.Getbooksresponse{Projected: p, View: "default"}
}

// NewCreatebookresponse initializes result type Createbookresponse from viewed
// result type Createbookresponse.
func NewCreatebookresponse(vres *librarianviews.Createbookresponse) *Createbookresponse {
	return newCreatebookresponse(vres.Projected)
}

// NewViewedCreatebookresponse initializes viewed result type
// Createbookresponse from result type Createbookresponse using the given view.
func NewViewedCreatebookresponse(res *Createbookresponse, view string) *librarianviews.Createbookresponse {
	p := newCreatebookresponseView(res)
	return &librarianviews.Createbookresponse{Projected: p, View: "default"}
}

// NewUpdatebookresponse initializes result type Updatebookresponse from viewed
// result type Updatebookresponse.
func NewUpdatebookresponse(vres *librarianviews.Updatebookresponse) *Updatebookresponse {
	return newUpdatebookresponse(vres.Projected)
}

// NewViewedUpdatebookresponse initializes viewed result type
// Updatebookresponse from result type Updatebookresponse using the given view.
func NewViewedUpdatebookresponse(res *Updatebookresponse, view string) *librarianviews.Updatebookresponse {
	p := newUpdatebookresponseView(res)
	return &librarianviews.Updatebookresponse{Projected: p, View: "default"}
}

// newGetbookresponse converts projected type Getbookresponse to service type
// Getbookresponse.
func newGetbookresponse(vres *librarianviews.GetbookresponseView) *Getbookresponse {
	res := &Getbookresponse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Author != nil {
		res.Author = *vres.Author
	}
	if vres.BookCover != nil {
		res.BookCover = *vres.BookCover
	}
	if vres.PublishedAt != nil {
		res.PublishedAt = *vres.PublishedAt
	}
	return res
}

// newGetbookresponseView projects result type Getbookresponse to projected
// type GetbookresponseView using the "default" view.
func newGetbookresponseView(res *Getbookresponse) *librarianviews.GetbookresponseView {
	vres := &librarianviews.GetbookresponseView{
		ID:          &res.ID,
		Title:       &res.Title,
		Author:      &res.Author,
		BookCover:   &res.BookCover,
		PublishedAt: &res.PublishedAt,
	}
	return vres
}

// newGetbooksresponse converts projected type Getbooksresponse to service type
// Getbooksresponse.
func newGetbooksresponse(vres *librarianviews.GetbooksresponseView) *Getbooksresponse {
	res := &Getbooksresponse{}
	if vres.Books != nil {
		res.Books = newResultbookCollection(vres.Books)
	}
	return res
}

// newGetbooksresponseView projects result type Getbooksresponse to projected
// type GetbooksresponseView using the "default" view.
func newGetbooksresponseView(res *Getbooksresponse) *librarianviews.GetbooksresponseView {
	vres := &librarianviews.GetbooksresponseView{}
	if res.Books != nil {
		vres.Books = newResultbookCollectionView(res.Books)
	}
	return vres
}

// newResultbookCollection converts projected type ResultbookCollection to
// service type ResultbookCollection.
func newResultbookCollection(vres librarianviews.ResultbookCollectionView) ResultbookCollection {
	res := make(ResultbookCollection, len(vres))
	for i, n := range vres {
		res[i] = newResultbook(n)
	}
	return res
}

// newResultbookCollectionView projects result type ResultbookCollection to
// projected type ResultbookCollectionView using the "default" view.
func newResultbookCollectionView(res ResultbookCollection) librarianviews.ResultbookCollectionView {
	vres := make(librarianviews.ResultbookCollectionView, len(res))
	for i, n := range res {
		vres[i] = newResultbookView(n)
	}
	return vres
}

// newResultbook converts projected type Resultbook to service type Resultbook.
func newResultbook(vres *librarianviews.ResultbookView) *Resultbook {
	res := &Resultbook{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Author != nil {
		res.Author = *vres.Author
	}
	if vres.BookCover != nil {
		res.BookCover = *vres.BookCover
	}
	if vres.PublishedAt != nil {
		res.PublishedAt = *vres.PublishedAt
	}
	return res
}

// newResultbookView projects result type Resultbook to projected type
// ResultbookView using the "default" view.
func newResultbookView(res *Resultbook) *librarianviews.ResultbookView {
	vres := &librarianviews.ResultbookView{
		ID:          &res.ID,
		Title:       &res.Title,
		Author:      &res.Author,
		BookCover:   &res.BookCover,
		PublishedAt: &res.PublishedAt,
	}
	return vres
}

// newCreatebookresponse converts projected type Createbookresponse to service
// type Createbookresponse.
func newCreatebookresponse(vres *librarianviews.CreatebookresponseView) *Createbookresponse {
	res := &Createbookresponse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Author != nil {
		res.Author = *vres.Author
	}
	if vres.BookCover != nil {
		res.BookCover = *vres.BookCover
	}
	if vres.PublishedAt != nil {
		res.PublishedAt = *vres.PublishedAt
	}
	return res
}

// newCreatebookresponseView projects result type Createbookresponse to
// projected type CreatebookresponseView using the "default" view.
func newCreatebookresponseView(res *Createbookresponse) *librarianviews.CreatebookresponseView {
	vres := &librarianviews.CreatebookresponseView{
		ID:          &res.ID,
		Title:       &res.Title,
		Author:      &res.Author,
		BookCover:   &res.BookCover,
		PublishedAt: &res.PublishedAt,
	}
	return vres
}

// newUpdatebookresponse converts projected type Updatebookresponse to service
// type Updatebookresponse.
func newUpdatebookresponse(vres *librarianviews.UpdatebookresponseView) *Updatebookresponse {
	res := &Updatebookresponse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Author != nil {
		res.Author = *vres.Author
	}
	if vres.BookCover != nil {
		res.BookCover = *vres.BookCover
	}
	if vres.PublishedAt != nil {
		res.PublishedAt = *vres.PublishedAt
	}
	return res
}

// newUpdatebookresponseView projects result type Updatebookresponse to
// projected type UpdatebookresponseView using the "default" view.
func newUpdatebookresponseView(res *Updatebookresponse) *librarianviews.UpdatebookresponseView {
	vres := &librarianviews.UpdatebookresponseView{
		ID:          &res.ID,
		Title:       &res.Title,
		Author:      &res.Author,
		BookCover:   &res.BookCover,
		PublishedAt: &res.PublishedAt,
	}
	return vres
}
