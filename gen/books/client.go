// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books client
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package books

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "books" service client.
type Client struct {
	GetBookEndpoint    goa.Endpoint
	GetBooksEndpoint   goa.Endpoint
	CreateBookEndpoint goa.Endpoint
	UpdateBookEndpoint goa.Endpoint
	DeleteBookEndpoint goa.Endpoint
}

// NewClient initializes a "books" service client given the endpoints.
func NewClient(getBook, getBooks, createBook, updateBook, deleteBook goa.Endpoint) *Client {
	return &Client{
		GetBookEndpoint:    getBook,
		GetBooksEndpoint:   getBooks,
		CreateBookEndpoint: createBook,
		UpdateBookEndpoint: updateBook,
		DeleteBookEndpoint: deleteBook,
	}
}

// GetBook calls the "get-book" endpoint of the "books" service.
func (c *Client) GetBook(ctx context.Context, p *GetBookPayload) (res *Getbookresponse, err error) {
	var ires any
	ires, err = c.GetBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Getbookresponse), nil
}

// GetBooks calls the "get-books" endpoint of the "books" service.
func (c *Client) GetBooks(ctx context.Context, p *GetBooksPayload) (res *Getbooksresponse, err error) {
	var ires any
	ires, err = c.GetBooksEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Getbooksresponse), nil
}

// CreateBook calls the "create-book" endpoint of the "books" service.
func (c *Client) CreateBook(ctx context.Context, p *CreateBookPayload) (res *Createbookresponse, err error) {
	var ires any
	ires, err = c.CreateBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Createbookresponse), nil
}

// UpdateBook calls the "update-book" endpoint of the "books" service.
func (c *Client) UpdateBook(ctx context.Context, p *UpdateBookPayload) (res *Updatebookresponse, err error) {
	var ires any
	ires, err = c.UpdateBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Updatebookresponse), nil
}

// DeleteBook calls the "delete-book" endpoint of the "books" service.
func (c *Client) DeleteBook(ctx context.Context, p *DeleteBookPayload) (err error) {
	_, err = c.DeleteBookEndpoint(ctx, p)
	return
}
