// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package client

import (
	books "github.com/dgdraganov/super-librarian/gen/books"
	booksviews "github.com/dgdraganov/super-librarian/gen/books/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateBookRequestBody is the type of the "books" service "create-book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	// The title of the book.
	Title string `form:"title" json:"title" xml:"title"`
	// The author of the book.
	Author string `form:"author" json:"author" xml:"author"`
	// The cover image of the book.
	BookCover string `form:"book_cover" json:"book_cover" xml:"book_cover"`
	// The date at which the book was published.
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// UpdateBookRequestBody is the type of the "books" service "update-book"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// GetBookResponseBody is the type of the "books" service "get-book" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// GetBooksResponseBody is the type of the "books" service "get-books" endpoint
// HTTP response body.
type GetBooksResponseBody struct {
	// List of paginated books.
	Books ResultbookCollectionResponseBody `form:"books,omitempty" json:"books,omitempty" xml:"books,omitempty"`
}

// CreateBookResponseBody is the type of the "books" service "create-book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateBookResponseBody is the type of the "books" service "update-book"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// ResultbookCollectionResponseBody is used to define fields on response body
// types.
type ResultbookCollectionResponseBody []*ResultbookResponseBody

// ResultbookResponseBody is used to define fields on response body types.
type ResultbookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "create-book" endpoint of the "books" service.
func NewCreateBookRequestBody(p *books.CreateBookPayload) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Title:       p.Title,
		Author:      p.Author,
		BookCover:   p.BookCover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "update-book" endpoint of the "books" service.
func NewUpdateBookRequestBody(p *books.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{
		ID:          p.ID,
		Title:       &p.Title,
		Author:      &p.Author,
		BookCover:   &p.BookCover,
		PublishedAt: &p.PublishedAt,
	}
	return body
}

// NewGetBookGetbookresponseOK builds a "books" service "get-book" endpoint
// result from a HTTP "OK" response.
func NewGetBookGetbookresponseOK(body *GetBookResponseBody) *booksviews.GetbookresponseView {
	v := &booksviews.GetbookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewGetBooksGetbooksresponseOK builds a "books" service "get-books" endpoint
// result from a HTTP "OK" response.
func NewGetBooksGetbooksresponseOK(body *GetBooksResponseBody) *booksviews.GetbooksresponseView {
	v := &booksviews.GetbooksresponseView{}
	if body.Books != nil {
		v.Books = make([]*booksviews.ResultbookView, len(body.Books))
		for i, val := range body.Books {
			v.Books[i] = unmarshalResultbookResponseBodyToBooksviewsResultbookView(val)
		}
	}

	return v
}

// NewCreateBookCreatebookresponseOK builds a "books" service "create-book"
// endpoint result from a HTTP "OK" response.
func NewCreateBookCreatebookresponseOK(body *CreateBookResponseBody) *booksviews.CreatebookresponseView {
	v := &booksviews.CreatebookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewUpdateBookUpdatebookresponseOK builds a "books" service "update-book"
// endpoint result from a HTTP "OK" response.
func NewUpdateBookUpdatebookresponseOK(body *UpdateBookResponseBody) *booksviews.UpdatebookresponseView {
	v := &booksviews.UpdatebookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// ValidateResultbookCollectionResponseBody runs the validations defined on
// ResultbookCollectionResponseBody
func ValidateResultbookCollectionResponseBody(body ResultbookCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateResultbookResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResultbookResponseBody runs the validations defined on
// ResultbookResponseBody
func ValidateResultbookResponseBody(body *ResultbookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_cover", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}
