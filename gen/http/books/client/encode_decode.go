// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	books "github.com/dgdraganov/super-librarian/gen/books"
	booksviews "github.com/dgdraganov/super-librarian/gen/books/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetBookRequest instantiates a HTTP request object with method and path
// set to call the "books" service "get-book" endpoint
func (c *Client) BuildGetBookRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*books.GetBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "get-book", "*books.GetBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBookBooksPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "get-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetBookResponse returns a decoder for responses returned by the books
// get-book endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "get-book", err)
			}
			p := NewGetBookGetbookresponseOK(&body)
			view := "default"
			vres := &booksviews.Getbookresponse{Projected: p, View: view}
			if err = booksviews.ValidateGetbookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("books", "get-book", err)
			}
			res := books.NewGetbookresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "get-book", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBooksRequest instantiates a HTTP request object with method and path
// set to call the "books" service "get-books" endpoint
func (c *Client) BuildGetBooksRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		skip int
		take int
	)
	{
		p, ok := v.(*books.GetBooksPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "get-books", "*books.GetBooksPayload", v)
		}
		skip = p.Skip
		take = p.Take
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBooksBooksPath(skip, take)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "get-books", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetBooksResponse returns a decoder for responses returned by the books
// get-books endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetBooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBooksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "get-books", err)
			}
			p := NewGetBooksGetbooksresponseOK(&body)
			view := "default"
			vres := &booksviews.Getbooksresponse{Projected: p, View: view}
			if err = booksviews.ValidateGetbooksresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("books", "get-books", err)
			}
			res := books.NewGetbooksresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "get-books", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookRequest instantiates a HTTP request object with method and
// path set to call the "books" service "create-book" endpoint
func (c *Client) BuildCreateBookRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookBooksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "create-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookRequest returns an encoder for requests sent to the books
// create-book server.
func EncodeCreateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*books.CreateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "create-book", "*books.CreateBookPayload", v)
		}
		body := NewCreateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("books", "create-book", err)
		}
		return nil
	}
}

// DecodeCreateBookResponse returns a decoder for responses returned by the
// books create-book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "create-book", err)
			}
			p := NewCreateBookCreatebookresponseOK(&body)
			view := "default"
			vres := &booksviews.Createbookresponse{Projected: p, View: view}
			if err = booksviews.ValidateCreatebookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("books", "create-book", err)
			}
			res := books.NewCreatebookresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "create-book", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBookRequest instantiates a HTTP request object with method and
// path set to call the "books" service "update-book" endpoint
func (c *Client) BuildUpdateBookRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBookBooksPath()}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "update-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBookRequest returns an encoder for requests sent to the books
// update-book server.
func EncodeUpdateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*books.UpdateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "update-book", "*books.UpdateBookPayload", v)
		}
		body := NewUpdateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("books", "update-book", err)
		}
		return nil
	}
}

// DecodeUpdateBookResponse returns a decoder for responses returned by the
// books update-book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpdateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "update-book", err)
			}
			p := NewUpdateBookUpdatebookresponseOK(&body)
			view := "default"
			vres := &booksviews.Updatebookresponse{Projected: p, View: view}
			if err = booksviews.ValidateUpdatebookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("books", "update-book", err)
			}
			res := books.NewUpdatebookresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "update-book", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBookRequest instantiates a HTTP request object with method and
// path set to call the "books" service "delete-book" endpoint
func (c *Client) BuildDeleteBookRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*books.DeleteBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "delete-book", "*books.DeleteBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBookBooksPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "delete-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteBookResponse returns a decoder for responses returned by the
// books delete-book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDeleteBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "delete-book", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResultbookResponseBodyToBooksviewsResultbookView builds a value of
// type *booksviews.ResultbookView from a value of type *ResultbookResponseBody.
func unmarshalResultbookResponseBodyToBooksviewsResultbookView(v *ResultbookResponseBody) *booksviews.ResultbookView {
	if v == nil {
		return nil
	}
	res := &booksviews.ResultbookView{
		ID:          v.ID,
		Title:       v.Title,
		Author:      v.Author,
		BookCover:   v.BookCover,
		PublishedAt: v.PublishedAt,
	}

	return res
}
