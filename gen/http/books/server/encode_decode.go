// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	booksviews "github.com/dgdraganov/super-librarian/gen/books/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetBookResponse returns an encoder for responses returned by the books
// get-book endpoint.
func EncodeGetBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*booksviews.Getbookresponse)
		enc := encoder(ctx, w)
		body := NewGetBookResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetBookRequest returns a decoder for requests sent to the books
// get-book endpoint.
func DecodeGetBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetBookPayload(id)

		return payload, nil
	}
}

// EncodeGetBooksResponse returns an encoder for responses returned by the
// books get-books endpoint.
func EncodeGetBooksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*booksviews.Getbooksresponse)
		enc := encoder(ctx, w)
		body := NewGetBooksResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetBooksRequest returns a decoder for requests sent to the books
// get-books endpoint.
func DecodeGetBooksRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			skip int
			take int
			err  error

			params = mux.Vars(r)
		)
		{
			skipRaw := params["skip"]
			v, err2 := strconv.ParseInt(skipRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("skip", skipRaw, "integer"))
			}
			skip = int(v)
		}
		{
			takeRaw := params["take"]
			v, err2 := strconv.ParseInt(takeRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("take", takeRaw, "integer"))
			}
			take = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetBooksPayload(skip, take)

		return payload, nil
	}
}

// EncodeCreateBookResponse returns an encoder for responses returned by the
// books create-book endpoint.
func EncodeCreateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*booksviews.Createbookresponse)
		enc := encoder(ctx, w)
		body := NewCreateBookResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateBookRequest returns a decoder for requests sent to the books
// create-book endpoint.
func DecodeCreateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateBookRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateBookRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateBookPayload(&body)

		return payload, nil
	}
}

// EncodeUpdateBookResponse returns an encoder for responses returned by the
// books update-book endpoint.
func EncodeUpdateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*booksviews.Updatebookresponse)
		enc := encoder(ctx, w)
		body := NewUpdateBookResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateBookRequest returns a decoder for requests sent to the books
// update-book endpoint.
func DecodeUpdateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateBookRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateBookRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateBookPayload(&body)

		return payload, nil
	}
}

// EncodeDeleteBookResponse returns an encoder for responses returned by the
// books delete-book endpoint.
func EncodeDeleteBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteBookRequest returns a decoder for requests sent to the books
// delete-book endpoint.
func DecodeDeleteBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteBookPayload(id)

		return payload, nil
	}
}

// marshalBooksviewsResultbookViewToResultbookResponseBody builds a value of
// type *ResultbookResponseBody from a value of type *booksviews.ResultbookView.
func marshalBooksviewsResultbookViewToResultbookResponseBody(v *booksviews.ResultbookView) *ResultbookResponseBody {
	if v == nil {
		return nil
	}
	res := &ResultbookResponseBody{
		ID:          *v.ID,
		Title:       *v.Title,
		Author:      *v.Author,
		BookCover:   *v.BookCover,
		PublishedAt: *v.PublishedAt,
	}

	return res
}
