// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	librarianc "github.com/dgdraganov/super-librarian/gen/http/librarian/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `librarian (get-book|get-books|create-book|update-book|delete-book)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` librarian get-book --id 1128970373747957694` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		librarianFlags = flag.NewFlagSet("librarian", flag.ContinueOnError)

		librarianGetBookFlags  = flag.NewFlagSet("get-book", flag.ExitOnError)
		librarianGetBookIDFlag = librarianGetBookFlags.String("id", "REQUIRED", "Book id")

		librarianGetBooksFlags    = flag.NewFlagSet("get-books", flag.ExitOnError)
		librarianGetBooksSkipFlag = librarianGetBooksFlags.String("skip", "REQUIRED", "Number of books to skip")
		librarianGetBooksTakeFlag = librarianGetBooksFlags.String("take", "REQUIRED", "Number of books to take after skip")

		librarianCreateBookFlags    = flag.NewFlagSet("create-book", flag.ExitOnError)
		librarianCreateBookBodyFlag = librarianCreateBookFlags.String("body", "REQUIRED", "")

		librarianUpdateBookFlags    = flag.NewFlagSet("update-book", flag.ExitOnError)
		librarianUpdateBookBodyFlag = librarianUpdateBookFlags.String("body", "REQUIRED", "")

		librarianDeleteBookFlags  = flag.NewFlagSet("delete-book", flag.ExitOnError)
		librarianDeleteBookIDFlag = librarianDeleteBookFlags.String("id", "REQUIRED", "Book id")
	)
	librarianFlags.Usage = librarianUsage
	librarianGetBookFlags.Usage = librarianGetBookUsage
	librarianGetBooksFlags.Usage = librarianGetBooksUsage
	librarianCreateBookFlags.Usage = librarianCreateBookUsage
	librarianUpdateBookFlags.Usage = librarianUpdateBookUsage
	librarianDeleteBookFlags.Usage = librarianDeleteBookUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "librarian":
			svcf = librarianFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "librarian":
			switch epn {
			case "get-book":
				epf = librarianGetBookFlags

			case "get-books":
				epf = librarianGetBooksFlags

			case "create-book":
				epf = librarianCreateBookFlags

			case "update-book":
				epf = librarianUpdateBookFlags

			case "delete-book":
				epf = librarianDeleteBookFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "librarian":
			c := librarianc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-book":
				endpoint = c.GetBook()
				data, err = librarianc.BuildGetBookPayload(*librarianGetBookIDFlag)
			case "get-books":
				endpoint = c.GetBooks()
				data, err = librarianc.BuildGetBooksPayload(*librarianGetBooksSkipFlag, *librarianGetBooksTakeFlag)
			case "create-book":
				endpoint = c.CreateBook()
				data, err = librarianc.BuildCreateBookPayload(*librarianCreateBookBodyFlag)
			case "update-book":
				endpoint = c.UpdateBook()
				data, err = librarianc.BuildUpdateBookPayload(*librarianUpdateBookBodyFlag)
			case "delete-book":
				endpoint = c.DeleteBook()
				data, err = librarianc.BuildDeleteBookPayload(*librarianDeleteBookIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// librarianUsage displays the usage of the librarian command and its
// subcommands.
func librarianUsage() {
	fmt.Fprintf(os.Stderr, `The books service performs CRUD operations on books.
Usage:
    %[1]s [globalflags] librarian COMMAND [flags]

COMMAND:
    get-book: Retrieve a book by id.
    get-books: Get paginated books by specifying the number of books to skip and take.
    create-book: Create a single book.
    update-book: Updates a book by the given id.
    delete-book: Delete a single book.

Additional help:
    %[1]s librarian COMMAND --help
`, os.Args[0])
}
func librarianGetBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] librarian get-book -id INT

Retrieve a book by id.
    -id INT: Book id

Example:
    %[1]s librarian get-book --id 1128970373747957694
`, os.Args[0])
}

func librarianGetBooksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] librarian get-books -skip INT -take INT

Get paginated books by specifying the number of books to skip and take.
    -skip INT: Number of books to skip
    -take INT: Number of books to take after skip

Example:
    %[1]s librarian get-books --skip 1560156484854602529 --take 7825010768422407406
`, os.Args[0])
}

func librarianCreateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] librarian create-book -body JSON

Create a single book.
    -body JSON: 

Example:
    %[1]s librarian create-book --body '{
      "author": "17n",
      "book_cover": "l8z",
      "published_at": "2000-04-18",
      "title": "e0"
   }'
`, os.Args[0])
}

func librarianUpdateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] librarian update-book -body JSON

Updates a book by the given id.
    -body JSON: 

Example:
    %[1]s librarian update-book --body '{
      "author": "iuw",
      "book_cover": "zpu",
      "id": 1824628676797947605,
      "published_at": "1971-03-27",
      "title": "p"
   }'
`, os.Args[0])
}

func librarianDeleteBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] librarian delete-book -id INT

Delete a single book.
    -id INT: Book id

Example:
    %[1]s librarian delete-book --id 3768971979315361382
`, os.Args[0])
}
