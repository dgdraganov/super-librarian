// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	booksc "github.com/dgdraganov/super-librarian/gen/http/books/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `books (get-book|get-books|create-book|update-book|delete-book)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` books get-book --id 3320939167265847530` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		booksFlags = flag.NewFlagSet("books", flag.ContinueOnError)

		booksGetBookFlags  = flag.NewFlagSet("get-book", flag.ExitOnError)
		booksGetBookIDFlag = booksGetBookFlags.String("id", "REQUIRED", "Book id")

		booksGetBooksFlags    = flag.NewFlagSet("get-books", flag.ExitOnError)
		booksGetBooksSkipFlag = booksGetBooksFlags.String("skip", "REQUIRED", "Number of books to skip")
		booksGetBooksTakeFlag = booksGetBooksFlags.String("take", "REQUIRED", "Number of books to take after skip")

		booksCreateBookFlags    = flag.NewFlagSet("create-book", flag.ExitOnError)
		booksCreateBookBodyFlag = booksCreateBookFlags.String("body", "REQUIRED", "")

		booksUpdateBookFlags    = flag.NewFlagSet("update-book", flag.ExitOnError)
		booksUpdateBookBodyFlag = booksUpdateBookFlags.String("body", "REQUIRED", "")

		booksDeleteBookFlags  = flag.NewFlagSet("delete-book", flag.ExitOnError)
		booksDeleteBookIDFlag = booksDeleteBookFlags.String("id", "REQUIRED", "Book id")
	)
	booksFlags.Usage = booksUsage
	booksGetBookFlags.Usage = booksGetBookUsage
	booksGetBooksFlags.Usage = booksGetBooksUsage
	booksCreateBookFlags.Usage = booksCreateBookUsage
	booksUpdateBookFlags.Usage = booksUpdateBookUsage
	booksDeleteBookFlags.Usage = booksDeleteBookUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "books":
			svcf = booksFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "books":
			switch epn {
			case "get-book":
				epf = booksGetBookFlags

			case "get-books":
				epf = booksGetBooksFlags

			case "create-book":
				epf = booksCreateBookFlags

			case "update-book":
				epf = booksUpdateBookFlags

			case "delete-book":
				epf = booksDeleteBookFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "books":
			c := booksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-book":
				endpoint = c.GetBook()
				data, err = booksc.BuildGetBookPayload(*booksGetBookIDFlag)
			case "get-books":
				endpoint = c.GetBooks()
				data, err = booksc.BuildGetBooksPayload(*booksGetBooksSkipFlag, *booksGetBooksTakeFlag)
			case "create-book":
				endpoint = c.CreateBook()
				data, err = booksc.BuildCreateBookPayload(*booksCreateBookBodyFlag)
			case "update-book":
				endpoint = c.UpdateBook()
				data, err = booksc.BuildUpdateBookPayload(*booksUpdateBookBodyFlag)
			case "delete-book":
				endpoint = c.DeleteBook()
				data, err = booksc.BuildDeleteBookPayload(*booksDeleteBookIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// booksUsage displays the usage of the books command and its subcommands.
func booksUsage() {
	fmt.Fprintf(os.Stderr, `The books service performs CRUD operations on books.
Usage:
    %[1]s [globalflags] books COMMAND [flags]

COMMAND:
    get-book: Retrieve a book by id.
    get-books: Get paginated books by specifying the number of books to skip and take.
    create-book: Create a single book.
    update-book: Updates a book by the given id.
    delete-book: Delete a single book.

Additional help:
    %[1]s books COMMAND --help
`, os.Args[0])
}
func booksGetBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books get-book -id INT

Retrieve a book by id.
    -id INT: Book id

Example:
    %[1]s books get-book --id 3320939167265847530
`, os.Args[0])
}

func booksGetBooksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books get-books -skip INT -take INT

Get paginated books by specifying the number of books to skip and take.
    -skip INT: Number of books to skip
    -take INT: Number of books to take after skip

Example:
    %[1]s books get-books --skip 8921519650650740831 --take 8384150947811087024
`, os.Args[0])
}

func booksCreateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books create-book -body JSON

Create a single book.
    -body JSON: 

Example:
    %[1]s books create-book --body '{
      "author": "gtu",
      "book_cover": "49g",
      "published_at": "2009-04-11",
      "title": "yb"
   }'
`, os.Args[0])
}

func booksUpdateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books update-book -body JSON

Updates a book by the given id.
    -body JSON: 

Example:
    %[1]s books update-book --body '{
      "author": "67b",
      "book_cover": "995",
      "id": 4031548831220571457,
      "published_at": "1993-10-28",
      "title": "0j"
   }'
`, os.Args[0])
}

func booksDeleteBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books delete-book -id INT

Delete a single book.
    -id INT: Book id

Example:
    %[1]s books delete-book --id 461695706767255517
`, os.Args[0])
}
