// Code generated by goa v3.13.2, DO NOT EDIT.
//
// librarian HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	librarian "github.com/dgdraganov/super-librarian/gen/librarian"
	librarianviews "github.com/dgdraganov/super-librarian/gen/librarian/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetBookRequest instantiates a HTTP request object with method and path
// set to call the "librarian" service "get-book" endpoint
func (c *Client) BuildGetBookRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*librarian.GetBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("librarian", "get-book", "*librarian.GetBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBookLibrarianPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("librarian", "get-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetBookResponse returns a decoder for responses returned by the
// librarian get-book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetBookResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "get-book", err)
			}
			p := NewGetBookGetbookresponseOK(&body)
			view := "default"
			vres := &librarianviews.Getbookresponse{Projected: p, View: view}
			if err = librarianviews.ValidateGetbookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("librarian", "get-book", err)
			}
			res := librarian.NewGetbookresponse(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetBookNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "get-book", err)
			}
			err = ValidateGetBookNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("librarian", "get-book", err)
			}
			return nil, NewGetBookNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetBookInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "get-book", err)
			}
			err = ValidateGetBookInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("librarian", "get-book", err)
			}
			return nil, NewGetBookInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("librarian", "get-book", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBooksRequest instantiates a HTTP request object with method and path
// set to call the "librarian" service "get-books" endpoint
func (c *Client) BuildGetBooksRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		skip int
		take int
	)
	{
		p, ok := v.(*librarian.GetBooksPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("librarian", "get-books", "*librarian.GetBooksPayload", v)
		}
		skip = p.Skip
		take = p.Take
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBooksLibrarianPath(skip, take)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("librarian", "get-books", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetBooksResponse returns a decoder for responses returned by the
// librarian get-books endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetBooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBooksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "get-books", err)
			}
			p := NewGetBooksGetbooksresponseOK(&body)
			view := "default"
			vres := &librarianviews.Getbooksresponse{Projected: p, View: view}
			if err = librarianviews.ValidateGetbooksresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("librarian", "get-books", err)
			}
			res := librarian.NewGetbooksresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("librarian", "get-books", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookRequest instantiates a HTTP request object with method and
// path set to call the "librarian" service "create-book" endpoint
func (c *Client) BuildCreateBookRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookLibrarianPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("librarian", "create-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookRequest returns an encoder for requests sent to the
// librarian create-book server.
func EncodeCreateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*librarian.CreateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("librarian", "create-book", "*librarian.CreateBookPayload", v)
		}
		body := NewCreateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("librarian", "create-book", err)
		}
		return nil
	}
}

// DecodeCreateBookResponse returns a decoder for responses returned by the
// librarian create-book endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateBookResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "create-book", err)
			}
			p := NewCreateBookCreatebookresponseOK(&body)
			view := "default"
			vres := &librarianviews.Createbookresponse{Projected: p, View: view}
			if err = librarianviews.ValidateCreatebookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("librarian", "create-book", err)
			}
			res := librarian.NewCreatebookresponse(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body CreateBookNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "create-book", err)
			}
			err = ValidateCreateBookNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("librarian", "create-book", err)
			}
			return nil, NewCreateBookNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateBookBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "create-book", err)
			}
			err = ValidateCreateBookBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("librarian", "create-book", err)
			}
			return nil, NewCreateBookBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateBookInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "create-book", err)
			}
			err = ValidateCreateBookInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("librarian", "create-book", err)
			}
			return nil, NewCreateBookInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("librarian", "create-book", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBookRequest instantiates a HTTP request object with method and
// path set to call the "librarian" service "update-book" endpoint
func (c *Client) BuildUpdateBookRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBookLibrarianPath()}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("librarian", "update-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBookRequest returns an encoder for requests sent to the
// librarian update-book server.
func EncodeUpdateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*librarian.UpdateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("librarian", "update-book", "*librarian.UpdateBookPayload", v)
		}
		body := NewUpdateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("librarian", "update-book", err)
		}
		return nil
	}
}

// DecodeUpdateBookResponse returns a decoder for responses returned by the
// librarian update-book endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUpdateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("librarian", "update-book", err)
			}
			p := NewUpdateBookUpdatebookresponseOK(&body)
			view := "default"
			vres := &librarianviews.Updatebookresponse{Projected: p, View: view}
			if err = librarianviews.ValidateUpdatebookresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("librarian", "update-book", err)
			}
			res := librarian.NewUpdatebookresponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("librarian", "update-book", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBookRequest instantiates a HTTP request object with method and
// path set to call the "librarian" service "delete-book" endpoint
func (c *Client) BuildDeleteBookRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*librarian.DeleteBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("librarian", "delete-book", "*librarian.DeleteBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBookLibrarianPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("librarian", "delete-book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteBookResponse returns a decoder for responses returned by the
// librarian delete-book endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeDeleteBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("librarian", "delete-book", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResultbookResponseBodyToLibrarianviewsResultbookView builds a value
// of type *librarianviews.ResultbookView from a value of type
// *ResultbookResponseBody.
func unmarshalResultbookResponseBodyToLibrarianviewsResultbookView(v *ResultbookResponseBody) *librarianviews.ResultbookView {
	if v == nil {
		return nil
	}
	res := &librarianviews.ResultbookView{
		ID:          v.ID,
		Title:       v.Title,
		Author:      v.Author,
		BookCover:   v.BookCover,
		PublishedAt: v.PublishedAt,
	}

	return res
}
