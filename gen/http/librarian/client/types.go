// Code generated by goa v3.13.2, DO NOT EDIT.
//
// librarian HTTP client types
//
// Command:
// $ goa gen github.com/dgdraganov/super-librarian/design

package client

import (
	librarian "github.com/dgdraganov/super-librarian/gen/librarian"
	librarianviews "github.com/dgdraganov/super-librarian/gen/librarian/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateBookRequestBody is the type of the "librarian" service "create-book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	// The title of the book.
	Title string `form:"title" json:"title" xml:"title"`
	// The author of the book.
	Author string `form:"author" json:"author" xml:"author"`
	// The URL to the cover image.
	BookCover string `form:"book_cover" json:"book_cover" xml:"book_cover"`
	// The date at which the book was published.
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// UpdateBookRequestBody is the type of the "librarian" service "update-book"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title string `form:"title" json:"title" xml:"title"`
	// The author of the book.
	Author string `form:"author" json:"author" xml:"author"`
	// The URL to the cover image.
	BookCover string `form:"book_cover" json:"book_cover" xml:"book_cover"`
	// The date at which the book was published.
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// GetBookResponseBody is the type of the "librarian" service "get-book"
// endpoint HTTP response body.
type GetBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// GetBooksResponseBody is the type of the "librarian" service "get-books"
// endpoint HTTP response body.
type GetBooksResponseBody struct {
	// List of paginated books.
	Books ResultbookCollectionResponseBody `form:"books,omitempty" json:"books,omitempty" xml:"books,omitempty"`
}

// CreateBookResponseBody is the type of the "librarian" service "create-book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateBookResponseBody is the type of the "librarian" service "update-book"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// GetBookNotFoundResponseBody is the type of the "librarian" service
// "get-book" endpoint HTTP response body for the "not_found" error.
type GetBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookInternalServerErrorResponseBody is the type of the "librarian"
// service "get-book" endpoint HTTP response body for the
// "internal_server_error" error.
type GetBookInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookNotFoundResponseBody is the type of the "librarian" service
// "create-book" endpoint HTTP response body for the "not_found" error.
type CreateBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookBadRequestResponseBody is the type of the "librarian" service
// "create-book" endpoint HTTP response body for the "bad_request" error.
type CreateBookBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookInternalServerErrorResponseBody is the type of the "librarian"
// service "create-book" endpoint HTTP response body for the
// "internal_server_error" error.
type CreateBookInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResultbookCollectionResponseBody is used to define fields on response body
// types.
type ResultbookCollectionResponseBody []*ResultbookResponseBody

// ResultbookResponseBody is used to define fields on response body types.
type ResultbookResponseBody struct {
	// The unique id of the book.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The title of the book.
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The author of the book.
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// The cover image of the book.
	BookCover *string `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// The date at which the book was published.
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "create-book" endpoint of the "librarian" service.
func NewCreateBookRequestBody(p *librarian.CreateBookPayload) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Title:       p.Title,
		Author:      p.Author,
		BookCover:   p.BookCover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "update-book" endpoint of the "librarian" service.
func NewUpdateBookRequestBody(p *librarian.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{
		ID:          p.ID,
		Title:       p.Title,
		Author:      p.Author,
		BookCover:   p.BookCover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewGetBookGetbookresponseOK builds a "librarian" service "get-book" endpoint
// result from a HTTP "OK" response.
func NewGetBookGetbookresponseOK(body *GetBookResponseBody) *librarianviews.GetbookresponseView {
	v := &librarianviews.GetbookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewGetBookNotFound builds a librarian service get-book endpoint not_found
// error.
func NewGetBookNotFound(body *GetBookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookInternalServerError builds a librarian service get-book endpoint
// internal_server_error error.
func NewGetBookInternalServerError(body *GetBookInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBooksGetbooksresponseOK builds a "librarian" service "get-books"
// endpoint result from a HTTP "OK" response.
func NewGetBooksGetbooksresponseOK(body *GetBooksResponseBody) *librarianviews.GetbooksresponseView {
	v := &librarianviews.GetbooksresponseView{}
	if body.Books != nil {
		v.Books = make([]*librarianviews.ResultbookView, len(body.Books))
		for i, val := range body.Books {
			v.Books[i] = unmarshalResultbookResponseBodyToLibrarianviewsResultbookView(val)
		}
	}

	return v
}

// NewCreateBookCreatebookresponseOK builds a "librarian" service "create-book"
// endpoint result from a HTTP "OK" response.
func NewCreateBookCreatebookresponseOK(body *CreateBookResponseBody) *librarianviews.CreatebookresponseView {
	v := &librarianviews.CreatebookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewCreateBookNotFound builds a librarian service create-book endpoint
// not_found error.
func NewCreateBookNotFound(body *CreateBookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookBadRequest builds a librarian service create-book endpoint
// bad_request error.
func NewCreateBookBadRequest(body *CreateBookBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookInternalServerError builds a librarian service create-book
// endpoint internal_server_error error.
func NewCreateBookInternalServerError(body *CreateBookInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookUpdatebookresponseOK builds a "librarian" service "update-book"
// endpoint result from a HTTP "OK" response.
func NewUpdateBookUpdatebookresponseOK(body *UpdateBookResponseBody) *librarianviews.UpdatebookresponseView {
	v := &librarianviews.UpdatebookresponseView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// ValidateGetBookNotFoundResponseBody runs the validations defined on
// get-book_not_found_response_body
func ValidateGetBookNotFoundResponseBody(body *GetBookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookInternalServerErrorResponseBody runs the validations defined
// on get-book_internal_server_error_response_body
func ValidateGetBookInternalServerErrorResponseBody(body *GetBookInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookNotFoundResponseBody runs the validations defined on
// create-book_not_found_response_body
func ValidateCreateBookNotFoundResponseBody(body *CreateBookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookBadRequestResponseBody runs the validations defined on
// create-book_bad_request_response_body
func ValidateCreateBookBadRequestResponseBody(body *CreateBookBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookInternalServerErrorResponseBody runs the validations
// defined on create-book_internal_server_error_response_body
func ValidateCreateBookInternalServerErrorResponseBody(body *CreateBookInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResultbookCollectionResponseBody runs the validations defined on
// ResultbookCollectionResponseBody
func ValidateResultbookCollectionResponseBody(body ResultbookCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateResultbookResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResultbookResponseBody runs the validations defined on
// ResultbookResponseBody
func ValidateResultbookResponseBody(body *ResultbookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_cover", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}
